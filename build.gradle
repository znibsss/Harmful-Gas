plugins {
    id 'fabric-loom' version '0.5-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.mod_name
group = project.mod_group
version = project.mod_version + "+" + project.minecraft_version

repositories {
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }

    maven {
        name = "shedaniel"
        url = "https://maven.shedaniel.me/"
    }

    jcenter()

    mavenLocal()
}

dependencies {
    // Minecraft
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    // Yarn
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    // Fabric Loader
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    // Cardinal Components API
    modImplementation "com.github.OnyxStudios.Cardinal-Components-API:Cardinal-Components-API:${project.cardinal_components_api_version}"
    include "com.github.OnyxStudios.Cardinal-Components-API:Cardinal-Components-API:${project.cardinal_components_api_version}"

    // Satin
    modImplementation "com.github.Ladysnake:Satin:${project.satin_version}"
    include "com.github.Ladysnake:Satin:${project.satin_version}"

    // Blade
    modImplementation "vini2003.xyz:Blade:${project.blade_version}"
    include "vini2003.xyz:Blade:${project.blade_version}"

    // Cloth API
    modApi "me.shedaniel.cloth.api:cloth-api:${project.cloth_api_version}"
    include "me.shedaniel.cloth.api:cloth-api:${project.cloth_api_version}"
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
        mavenLocal()
    }
}
